#include <vector>
#include <algorithm>
#include <set>
using namespace std;

class Solution {
public:
    bool canAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength, int mid) {
        multiset<int> s(workers.end() - mid, workers.end());
        
        for (int i = mid - 1; i >= 0; i--) {
            auto it = s.lower_bound(tasks[i]);
            if (it != s.end()) {
                s.erase(it);
            } else {
                if (pills == 0) return false;
                it = s.lower_bound(tasks[i] - strength);
                if (it == s.end()) return false;
                s.erase(it);
                pills--;
            }
        }
        return true;
    }
    
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(tasks.begin(), tasks.end());
        sort(workers.begin(), workers.end());
        
        int left = 0, right = min((int)tasks.size(), (int)workers.size()), ans = 0;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canAssign(tasks, workers, pills, strength, mid)) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return ans;
    }
};
